ggplot(data = filter(mpcorn, plot_num == 3)) +
geom_point (aes(x= year, y = yield_bush, color = crop, shape = treated), size = 2.5) +
theme_light()+
facet_wrap(vars(plot_dir), ncol = 2)
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = crop, shape = treated), size = 2.5) +
theme_light()+
facet_wrap(vars(plot_dir), ncol = 2)
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = treated), size = 2.5) +
theme_light()+
facet_wrap(vars(plot_dir), ncol = 2)
View(mpcorn)
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = treated), size = 2.5) +
theme_light()+
facet_wrap(vars(plot), ncol = 4)
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = treated)) +
theme_light()+
facet_wrap(vars(plot), ncol = 4)
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = treated)) +
facet_wrap(vars(plot), ncol = 4) +
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = treatment)) +
## create a grid of related plots with facet_wrap
facet_wrap(vars(plot), ncol = 4) +
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = treated)) +
## create a grid of related plots with facet_wrap
facet_wrap(vars(plot), ncol = 4) +
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot(data = filter(mpcorn, plot_num == 4)) +
geom_point (aes(x= year, y = yield_bush, color = treatment)) +
## create a grid of related plots with facet_wrap
facet_wrap(vars(plot), ncol = 4) +
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot(data = filter(mpcorn, plot_num == 3)) +
geom_point (aes(x= year, y = yield_bush, color = treatment)) +
## create a grid of related plots with facet_wrap
facet_wrap(vars(plot), ncol = 4) +
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot(data = filter(mpcorn, plot_num == 5)) +
geom_point (aes(x= year, y = yield_bush, color = treatment)) +
## create a grid of related plots with facet_wrap
facet_wrap(vars(plot), ncol = 4) +
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot2::ggplot(data = dplyr::filter(mpcorn, plot_num == 5))+
ggplot2::geom_point(ggplot2::aes(x= year, y = yield_bush, color = treated))+
## create a grid of related plots with facet_wrap
ggplot2::facet_wrap(vars(plot), ncol = 4)+
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot2::ggplot(data = mpcorn)+
ggplot2::geom_point(ggplot2::aes(x= year, y = yield_bush, color = treated))+
## create a grid of related plots with facet_wrap
ggplot2::facet_wrap(vars(plot_num), ncol = 1)+
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By treatment and subplot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'rotation'
## use line type to differentiate between treated and untreated corn
ggplot2::ggplot(data = mpcorn) +
ggplot2::geom_smooth(ggplot2::aes(x= year, y = yield_bush, color = rotation, linetype = treated))+
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yield Trends in Bushels per Acre",
subtitle = "Treated vs. untreated and by number of crops in rotation")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot2::ggplot(data = mpcorn)+
ggplot2::geom_point(ggplot2::aes(x= year, y = yield_bush, color = treated))+
## create a grid of related plots with facet_wrap
ggplot2::facet_wrap(vars(plot_num), ncol = 1)+
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "By plot and treated vs. untreated")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot2::ggplot(data = mpcorn)+
ggplot2::geom_point(ggplot2::aes(x= year, y = yield_bush, color = treated))+
## create a grid of related plots with facet_wrap
ggplot2::facet_wrap(vars(plot_num), ncol = 1)+
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "Treated vs. untreated by plot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot2::ggplot(data = dplyr::filter(mpcorn, plot_num == 5))+
ggplot2::geom_point(ggplot2::aes(x= year, y = yield_bush, color = treated))+
## create a grid of related plots with facet_wrap
ggplot2::facet_wrap(vars(plot), ncol = 4)+
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "Plot 5 treated vs. untreated by subplot")+
## add one of the built-in themes
ggplot2::theme_light()
## create a smooth line plot with 'year' on the x axis and 'yield_bush' on the y axis
## color code the lines by 'treated'
ggplot(data = filter(mpcorn, plot_num == 5)) +
geom_point (aes(x= year, y = yield_bush, color = treatment)) +
## create a grid of related plots with facet_wrap
facet_wrap(vars(plot), ncol = 4) +
## add title and subtitle
ggplot2::labs(title = "Morrow Plots Corn Yields in Bushels per Acre",
subtitle = "Plot 5 by subplot and treatment")+
## add one of the built-in themes
ggplot2::theme_light()
library(morrowplots)
library(dplyr)
library(ggplot2)
kable(head(morrowplots))
head(morrowplots)
library(usethis)
?use_logo
use_logo(".morrowplots_hex_logo.png")
getwd()
> use_logo("../morrowplots_hex_logo.png")
use_logo("../morrowplots_hex_logo.png")
library(devtools)
check()
library(pkgbuild)
check()
check()
library(usethis)
use_vignette("plots-extras")
library(usethis)
use_logo("morrowplots_hex_logo1")
use_logo("morrowplots_hex_logo1.png")
use_logo(..\"morrowplots_hex_logo1.png")
getwd()
use_logo(../"morrowplots_hex_logo1.png")
use_logo(./"morrowplots_hex_logo1.png")
use_logo("../morrowplots_hex_logo1.png")
use_logo("../morrowplots_hex_logo1.png")
library(devtools)
check()
check()
library(devtools)
check(remote = TRUE, manual = TRUE)
library(devtools)
check_win_devel()
use_github_action()
use_github_action()
use_release_issue()
check()
use_github_links()
use_github_links()
use_github_links(overwrite = TRUE)
library(urlchecker)
url_check()
build_readme()
check(remote = TRUE, manual = TRUE)
check_mac_release()
submit_cran()
library(devtools)
use_github_release()
use_dev_version()
use_dev_version()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
## preview first 12 rows of data
library(morrowplots)
library(knitr)
kable(morrowplots[1:12, ])
help(morrowplots)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
library(devtools)
build_readme()
library(tidyverse)
morrowplots <- read_csv("../morrow-plots_v02_1888-2021_soil.csv")
usethis::use_data(morrowplots, overwrite = TRUE)
load("~/R/morrowplots/data/morrowplots.rda")
View(morrowplots)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
## preview first 12 rows of data
library(morrowplots)
library(knitr)
kable(morrowplots[1:12, ])
help(morrowplots)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
devtools::check()
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
## preview first 12 rows of data
library(morrowplots)
library(knitr)
kable(morrowplots[1:12, ])
help(morrowplots)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
devtools::build()
devtools::build_readme()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
## preview first 12 rows of data
library(morrowplots)
library(knitr)
kable(morrowplots[1:12, ])
help(morrowplots)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
View(morrowplots)
devtools::install()
devtools::build_readme()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
## preview first 12 rows of data
library(morrowplots)
library(knitr)
kable(morrowplots[1:12, ])
help(morrowplots)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
library(devtools)
devtools::build()
devtools::install()
devtools::build_readme()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
## preview first 12 rows of data
library(morrowplots)
library(knitr)
kable(morrowplots[1:12, ])
help(morrowplots)
## display just the variables and definitions from the help supplied by data.R; hard coded here as "lines = 38:100"
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
help_console(morrowplots, "html", lines = 38:100)
load("~/R/morrowplots/data/morrowplots.rda")
View(morrowplots)
library(devtools)
install.packages("devtools")
install.packages("tidyverse")
install.packages("usethis")
library(usethis)
use_release_issue()
usethis::gh_token_help()
gitcreds::gitcreds_set()
use_release_issue()
urlchecker::url_check()
devtools::build_readme()
devtools::check(remote = TRUE, manual = TRUE)
install.packages("tinytex")
tinytex::install_tinytex()
devtools::check(remote = TRUE, manual = TRUE)
tinytex::pdflatex()
devtools::check()
devtools::check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
install.packages(revdepcheck)
install.packages("revdepcheck")
pak::pkg_install("r-lib/revdepcheck")
install.packages("pak")
pak::pkg_install("r-lib/revdepcheck")
